{"version":3,"sources":["logo.svg","components/Tickets/title.svg","components/Tickets/plane.svg","components/Filters/Filters.js","components/Tickets/Tickets.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Filters","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","type","id","htmlFor","Component","Tickets","props","_this","call","state","tickets","setState","data","map","ticket","departure_time","arrival_date","departure_date","origin","origin_name","arrival_time","destination","destination_name","price","stops","console","log","src","title","alt","plane","App","logo","Filters_Filters_Filters","Tickets_Tickets_Tickets","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,u1GCG3BC,SAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAGQ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,OACAH,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,kBAEJF,EAAAC,EAAAC,cAAA,iIACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWC,GAAG,QAC1BL,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,OAAf,uBAEJN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWC,GAAG,wBAC1BL,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,uBAAf,8EAEJN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWC,GAAG,kBAC1BL,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,iBAAf,6DAEJN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWC,GAAG,kBAC1BL,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,iBAAf,6DAEJN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWC,GAAG,kBAC1BL,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,iBAAf,mEA/BxBnB,EAAA,CAA6BoB,uDCKhBC,SAAb,SAAApB,GAEI,SAAAoB,EAAYC,GAAO,IAAAC,EAAA,OAAArB,OAAAC,EAAA,EAAAD,CAAAE,KAAAiB,IACfE,EAAArB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmB,GAAAG,KAAApB,KAAMkB,KACDG,MAAQ,CAAEC,QAAS,IAFTH,EAFvB,OAAArB,OAAAO,EAAA,EAAAP,CAAAmB,EAAApB,GAAAC,OAAAQ,EAAA,EAAAR,CAAAmB,EAAA,EAAAV,IAAA,oBAAAC,MAAA,WASYR,KAAKuB,SAAS,CAAED,QAASE,EAAKF,YAT1C,CAAAf,IAAA,SAAAC,MAAA,WAqBa,IAEGc,EAAYtB,KAAKqB,MAAjBC,QAER,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVU,EAAQG,IAAI,SAACC,GAAW,IACbC,EAA8HD,EAA9HC,eAAgBC,EAA8GF,EAA9GE,aAAaC,EAAiGH,EAAjGG,eAAeC,EAAkFJ,EAAlFI,OAAQC,EAA0EL,EAA1EK,YAAaC,EAA6DN,EAA7DM,aAAaC,EAAgDP,EAAhDO,YAAaC,EAAmCR,EAAnCQ,iBAAkBC,EAAiBT,EAAjBS,MAAOC,EAAUV,EAAVU,MAE5H,OADAC,QAAQC,IAAI,SAAUZ,GAElBjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAK4B,IAAKC,IAAOC,IAAI,UACrBhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,qDAAmCuB,EAAnC,aAGR1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQe,GACvBlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQkB,EAAvB,IAAgCC,GAChCtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQiB,IAE3BpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,YAAOyB,EAAP,oDAAgC,GAATA,EAAa,IAAM,UAC1C3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQ2B,IAAKG,IAAOD,IAAI,YAG/ChC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQoB,GACvBvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQsB,EAAvB,IAA0CD,GAC1CxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQgB,aArD3DX,EAAA,CAA6BD,cCYd2B,MAdf,WACE,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAK4B,IAAKK,IAAMhC,UAAU,WAAW6B,IAAI,UAE3ChC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAD,SCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0e5d9d6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c82fe072.svg\";","module.exports = __webpack_public_path__ + \"static/media/title.432b1606.svg\";","module.exports = __webpack_public_path__ + \"static/media/plane.3e607416.svg\";","import React, { Component } from 'react';\nimport './Filters.css'\n\nexport class Filters extends Component {\n\n    render() {\n        return (\n            <div className=\"filters\">\n                <h2>Валюта</h2>\n                <ul className=\"lang\">\n                    <li className=\"active\">RUB</li>\n                    <li>USD</li>\n                    <li>EUR</li>\n                </ul>\n                <h3>Количество пересадок</h3>\n                <div className=\"filters-container\">\n                    <div className=\"transplants-filter\">\n                        <input type=\"checkbox\" id=\"all\" />\n                        <label htmlFor=\"all\">Все</label>\n                    </div>\n                    <div className=\"transplants-filter\">\n                        <input type=\"checkbox\" id=\"without-transplants\" />\n                        <label htmlFor=\"without-transplants\">Без пересадок</label>\n                    </div>\n                    <div className=\"transplants-filter\">\n                        <input type=\"checkbox\" id=\"transplants-1\" />\n                        <label htmlFor=\"transplants-1\">1 пересадка</label>\n                    </div>\n                    <div className=\"transplants-filter\">\n                        <input type=\"checkbox\" id=\"transplants-2\" />\n                        <label htmlFor=\"transplants-2\">2 пересадки</label>\n                    </div>\n                    <div className=\"transplants-filter\">\n                        <input type=\"checkbox\" id=\"transplants-3\" />\n                        <label htmlFor=\"transplants-3\">3 пересадки</label>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport title from './title.svg';\nimport plane from './plane.svg';\nimport data from './tickets.json';\nimport './Tickets.css';\n\n// const API = \"http://www.json-generator.com/api/json/get/cqGducpwHS?indent=2\";\n\nexport class Tickets extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { tickets: [] };\n    }\n\n    componentDidMount() {\n        \n            this.setState({ tickets: data.tickets });\n    \n        // fetch(API)\n        //     .then(response => response.json())\n        //     .then(data => {\n        //         console.log('data', data);\n        //         this.setState({ tickets: data.tickets });\n        //     })\n        //     .catch(error => console.log('error', error));\n    }\n\n\n    render() {\n        \n        const { tickets } = this.state;\n       \n        return (\n            <div className=\"tickets\">\n                {tickets.map((ticket) => {\n                    const { departure_time, arrival_date,departure_date,origin, origin_name, arrival_time,destination, destination_name, price, stops } = ticket;\n                    console.log('ticket', ticket);\n                    return (\n                        <div className=\"ticket\">\n                            <div className=\"side-buy\">\n                                <img src={title} alt=\"title\" />\n                                <div className=\"btn-buy\">\n                                    <span className=\"price\">Купить за {price} ₽</span>\n                                </div>\n                            </div>\n                            <div className=\"transp-side\">\n                                <div className=\"transp-from\">\n                                    <div className=\"time\">{departure_time}</div>\n                                    <div className=\"sity\">{origin},{origin_name}</div>\n                                    <div className=\"date\">{departure_date}</div>\n                                </div>\n                                <div className=\"amount-transp\">\n                                    <span>{stops} пересадк{stops == 1 ? 'a' : 'и' }</span>\n                                    <div className=\"underline\">\n                                        <img className=\"plane\" src={plane} alt=\"plane\"/>\n                                    </div>\n                                </div>\n                                <div className=\"transp-to\">\n                                    <div className=\"time\">{arrival_time}</div>\n                                    <div className=\"sity\">{destination_name},{destination}</div>\n                                    <div className=\"date\">{arrival_date}</div>\n                                </div>\n                            </div>\n                        </div>\n                    )\n                }\n                )}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Filters } from './components/Filters/Filters';\nimport { Tickets } from './components/Tickets/Tickets';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <div className=\"container\">\n        <Filters />\n        <Tickets />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}